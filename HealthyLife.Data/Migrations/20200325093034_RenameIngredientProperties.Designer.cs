// <auto-generated />
using HealthyLife.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthyLife.Data.Migrations
{
    [DbContext(typeof(FoodContext))]
    [Migration("20200325093034_RenameIngredientProperties")]
    partial class RenameIngredientProperties
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HealthyLife.Domain.Food.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calory")
                        .HasColumnType("int");

                    b.Property<double>("Carbohydrate")
                        .HasColumnType("float");

                    b.Property<double>("Fat")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Protein")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Calory = 143,
                            Carbohydrate = 0.69999999999999996,
                            Fat = 9.5,
                            Name = "Large Egg",
                            Protein = 13.0
                        },
                        new
                        {
                            Id = 2,
                            Calory = 0,
                            Carbohydrate = 0.0,
                            Fat = 0.0,
                            Name = "Salt",
                            Protein = 0.0
                        });
                });

            modelBuilder.Entity("HealthyLife.Domain.Food.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReadyInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("Servings")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Instructions = "Crack the eggs into the hot pan and salt them. Cook both sides of the eggs for 2-2 minutes.",
                            Picture = "https://pixabay.com/get/55e6d7474350a914f6d1867dda6d49214b6ac3e45659754e762f7cd095/fried-3624925_1920.jpg",
                            ReadyInMinutes = 5,
                            Servings = 1,
                            Title = "Fried Egg"
                        });
                });

            modelBuilder.Entity("HealthyLife.Domain.Food.RecipeIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 4.0,
                            IngredientId = 1,
                            RecipeId = 1,
                            Unit = ""
                        },
                        new
                        {
                            Id = 2,
                            Amount = 0.5,
                            IngredientId = 2,
                            RecipeId = 1,
                            Unit = "tsp"
                        });
                });

            modelBuilder.Entity("HealthyLife.Domain.Food.RecipeIngredient", b =>
                {
                    b.HasOne("HealthyLife.Domain.Food.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthyLife.Domain.Food.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
